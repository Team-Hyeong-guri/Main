#version 400 core

vec3 lightColor = vec3(1.0, 1.0, 1.0);

in vec4 vtxPosition2;
in vec3 outNormal;
in vec3 v_Color;

uniform mat4 viewmat;
uniform mat4 projectmat;
uniform mat4 worldMat;
uniform vec3 uLightPos;
uniform int lightTurnOnOff;

struct Material{
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform Material material;

out vec4 gl_FragColor;

void main()
{
	if(lightTurnOnOff == 1){

		vec3 color = material.ambient * lightColor;

		vec4 vPos = vtxPosition2;

		vec4 vLightPos =viewmat*vec4(uLightPos,1.0);
		vec3 lightDir = normalize(vLightPos.xyz-vPos.xyz);
		vec4 transNorm = viewmat*worldMat*vec4(outNormal,0.0);
		vec3 tNorm = normalize(transNorm.xyz);
   
		color += lightColor * (dot(lightDir,tNorm.xyz)* material.diffuse);
   
		vec3 reflectedLight = normalize(reflect(lightDir,tNorm.xyz));
		vec3 viewDir = normalize(vec3(0,0,0) -vPos.xyz);
		
		if(dot(reflectedLight,viewDir)<= 0){
			color += lightColor * (pow(abs(dot(reflectedLight,viewDir)),96) * material.specular);
		}
		gl_FragColor = vec4(color, 1.0);
	}
	else{
		gl_FragColor = vec4(v_Color,1.);
	}
}